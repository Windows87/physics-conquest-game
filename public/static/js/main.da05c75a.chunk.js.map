{"version":3,"sources":["screens/Start/index.js","screens/Game/index.js","screens/Admin/index.js","serviceWorker.js","index.js"],"names":["Start","state","username","onNameChange","event","target","value","setState","onFormSumit","preventDefault","localStorage","setItem","props","history","push","this","className","onSubmit","type","placeholder","onChange","required","Component","Question","question","answerQuestion","player","isAlreadyAnswer","isCorrect","answered","forEach","questionAnswered","questionId","_id","correct","backgroundColor","style","title","answers","map","answer","disabled","key","onClick","GameComponent","questions","onAnswerQuestion","points","dots","speed","slidesToShow","length","slidesToScroll","infinite","Top","playersTop","icon","medal","size","Game","socket","io","window","location","hostname","waitingStart","error","getItem","emit","on","values","alreadyStarted","top","Admin","startGame","finishGame","Boolean","match","ReactDOM","render","component","path","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da05c75a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './index.css';\n\nclass Start extends Component {\n  state = {\n  \tusername: ''\n  };\n\n  onNameChange = event => {\n  \tconst username = event.target.value;\n  \tthis.setState({ username });\n  }\n\n  onFormSumit = event => {\n  \tevent.preventDefault();\n  \tlocalStorage.setItem('username', this.state.username);\n  \tthis.props.history.push('/game');\n  }\n\n  render() {\n  \tconst { onNameChange, onFormSumit, state } = this;\n  \tconst { username } = state;\n\n  \treturn (\n  \t  <div className=\"start\">\n  \t    <form onSubmit={onFormSumit}>\n  \t      <input type=\"text\" placeholder=\"Nome\" value={username} onChange={onNameChange} required />\n  \t      <input type=\"submit\" value=\"Entrar\" />\n  \t    </form>\n  \t  </div>\n  \t);\n  }\n}\n\nexport default Start;","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport Slider from \"react-slick\";\n import Icon from 'react-icons-kit';\nimport {medal} from 'react-icons-kit/entypo/medal';\nimport './index.css';\n\nconst Question = ({ question, answerQuestion, player }) => {\n  let isAlreadyAnswer = false;\n  let isCorrect = false\n\n  player.answered.forEach(questionAnswered => {\n  \tif(questionAnswered.questionId === question._id) {\n  \t  isAlreadyAnswer = true;\n  \t  isCorrect = questionAnswered.correct;\n  \t}\n  });\n\n  const backgroundColor = isAlreadyAnswer && isCorrect ? '#4caf50' : isAlreadyAnswer && !isCorrect ? '#f44336' : '#1565c0';\n\n  return (\n  \t<div className=\"question\" style={{ backgroundColor }}>\n\n  \t  <h2>{ question.title }</h2>\n  \t  { question.answers.map(answer => <button disabled={isAlreadyAnswer} key={answer} style={{ backgroundColor }} onClick={() => answerQuestion(question._id, answer)}>{ answer }</button>) }\n  \t</div>\n  );\n}\n\nclass GameComponent extends Component {\n  render() {\n  \tconst { questions, player, onAnswerQuestion } = this.props;\n  \treturn (\n  \t  <div className=\"gameComponent\">\n  \t    <header>\n  \t      <b>{player.username}</b>\n  \t      <span>{player.points}</span>\n  \t    </header>\n  \t    <Slider dots={true} speed={500} slidesToShow={questions.length} slidesToScroll={questions.length} infinite={true}>\n  \t      { questions.map(question => <Question key={question._id} player={player} question={question} answerQuestion={onAnswerQuestion} />) }\n  \t    </Slider>\n  \t  </div>\n  \t);\n  }\n}\n\nconst Top = ({ playersTop }) => (\n  <div className=\"top\">\n    <Icon icon={medal} className=\"top-icon\" size={64} />\n    <h1>{ playersTop[0].username } ({ playersTop[0].points })</h1>\n    { playersTop[1] ? <h2>{ playersTop[1].username } ({ playersTop[1].points })</h2> : null }\n    { playersTop[2] ? <h3>{ playersTop[2].username } ({ playersTop[2].points })</h3> : null }\n  </div>\n);\n\nclass Game extends Component {\n  socket = io(`http://${window.location.hostname}:8080/`);\n\n  state = {\n  \twaitingStart: true,\n    error: '',\n  \tplayersTop: [],\n  \tplayer: { username: localStorage.getItem('username'), points: 0, answered: [] },\n  \tquestions: []\n  }\n\n  constructor(props) {\n  \tsuper(props);\n\n  \tconst username = localStorage.getItem('username');\n\n  \tif(!username)\n  \t  return this.props.history.push('/');\n  }\n\n  componentDidMount() {\n    this.socket.emit('enter-game', localStorage.getItem('username'));\n  \tthis.socket.on('enter-error', error => this.setState({ error, waitingStart: false }));\n  \tthis.socket.on('on-start-game', values => this.setState({ questions: values.questions, waitingStart: false, alreadyStarted: false }));\n  \tthis.socket.on('on-finish-game', values => this.setState({ playersTop: values.top }));\n  \tthis.socket.on('on-answer', values => this.setState({ player: values.player }));\t\n  }\n\n  answerQuestion = (questionId, answer) => {\n  \tthis.socket.emit('answer', { questionId, answer });\n  }\n\n  render() {\n  \tconst { answerQuestion } = this;\n  \tconst { waitingStart, alreadyStarted, error, player, questions, playersTop } = this.state;\n\n  \treturn (\n  \t  <div className=\"game\">\n  \t    { waitingStart ? <h1>Esperando o Jogo Iniciar..</h1> : null }\n  \t    { error ? <h1>{error}</h1> : null }\n  \t    { alreadyStarted ? <h1>O Jogo já Começou</h1> : null }\n  \t    { !waitingStart && !error && !alreadyStarted && !playersTop.length ? <GameComponent questions={questions} player={player} onAnswerQuestion={answerQuestion} /> : null }\n  \t    { playersTop.length ? <Top playersTop={playersTop} /> : null }\n  \t  </div>\n  \t);\n  }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport './index.css';\n\nclass Admin extends Component {\n  socket = io(`http://${window.location.hostname}:8080/`);\n\n  startGame = () => {\n    this.socket.emit('start-game');\n  }\n\n  finishGame = () => {\n  \tthis.socket.emit('finish-game');\n  }\n\n  render() {\n  \tconst { startGame, finishGame } = this;\n\n  \treturn (\n  \t  <div>\n  \t    <button onClick={startGame}>Iniciar Jogo</button>\n  \t    <button onClick={finishGame}>Terminar Jogo</button>\n  \t  </div>\n  \t);\n  }\n}\n\nexport default Admin;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Start from './screens/Start';\nimport Game from './screens/Game';\nimport Admin from './screens/Admin';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route component={Start} path=\"/\" exact />\n      <Route component={Game} path=\"/game\" exact />\n      <Route component={Admin} path=\"/admin\" exact />\n    </Switch>\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}